{"version":3,"file":"static/js/513.1f0aee81.chunk.js","mappings":"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","sources":["components/VerifyUser.js","views/pages/leadRegister/RegisterLeadViaPhone.js","helper/encryption/encrypt.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Grid, TextField, Button, Dialog, DialogTitle, DialogContent, DialogActions } from '@mui/material';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { toast } from 'react-toastify';\r\n\r\nconst VerifyUser = ({ verifyPopUp, setVerifyPopUp, userData }) => {\r\n    const navigate = useNavigate();\r\n    const handleConfirm = () => {\r\n        setVerifyPopUp(false);\r\n        navigate(`/lead/createlead/${encodeURIComponent(userData.ph_number)}`, {\r\n            state: userData \r\n        });\r\n       \r\n    };\r\n    const handleClose = () => {\r\n        toast.error('This mobile number is already registered with customer');\r\n        setVerifyPopUp(false);\r\n        return navigate('/lead/verify-phonenumber');\r\n    };\r\n    return (\r\n        <>\r\n            <Dialog open={verifyPopUp}>\r\n                <DialogTitle sx={{ fontSize: '1.2rem', textAlign: 'center' }}>\r\n                    Are you {userData.first_name + ' ' + userData.last_name}?\r\n                </DialogTitle>\r\n\r\n                <DialogActions sx={{ justifyContent: 'center' }}>\r\n                    <Button onClick={handleConfirm} variant=\"contained\" color=\"success\" sx={{ mr: 2 }}>\r\n                        Yes\r\n                    </Button>\r\n                    <Button onClick={handleClose} variant=\"contained\" color=\"error\">\r\n                        No\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default VerifyUser;\r\n","import React, { useState } from 'react';\r\nimport { Grid, TextField, Button, Dialog, DialogTitle, DialogContent, DialogActions } from '@mui/material';\r\nimport SubCard from '../../../ui-component/cards/SubCard';\r\nimport MainCard from '../../../ui-component/cards/MainCard';\r\nimport { gridSpacing } from '../../../store/constant';\r\nimport { useTranslation } from 'react-i18next';\r\nimport axios from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport MuiPhoneNumber from 'material-ui-phone-number';\r\nimport { isValidPhoneNumber, parsePhoneNumber } from 'libphonenumber-js';\r\nimport VerifyUser from '../../../components/VerifyUser';\r\nimport { BrowserRouter as Router, Route, useNavigate } from 'react-router-dom';\r\nimport { useAuthContext } from '../../../hooks/useAuthContext';\r\nimport Cookies from 'js-cookie';\r\nimport { encryptData } from '../../../helper/encryption/encrypt';\r\n\r\nconst BASE_URL = process.env.REACT_APP_BASE_URL;\r\n\r\nconst RegisterLeadViaPhone = () => {\r\n    const navigate = useNavigate();\r\n    const { user } = useAuthContext();\r\n    let token = null;\r\n    if (user) {\r\n        token = user.token;\r\n    }\r\n\r\n    const [mobileNumber, setMobileNumber] = useState('');\r\n    const [otp, setOtp] = useState('');\r\n    const [otpSent, setOtpSent] = useState(false);\r\n    const [countryCode, setCountryCode] = useState('IN');\r\n    const [DOB, setDOB] = useState();\r\n    const [verifyForm, setVerifyForm] = useState(true);\r\n    const [showDobPopup, setShowDobPopup] = useState(false);\r\n    const [verifyPopUp, setVerifyPopUp] = useState(false);\r\n    const [userData, setUserData] = useState('');\r\n    const { t } = useTranslation();\r\n\r\n    const handleMobileNumberChange = (phoneNumber) => {\r\n        setMobileNumber(phoneNumber);\r\n    };\r\n\r\n    const handleOtpChange = (event) => {\r\n        const inputOtp = event.target.value;\r\n        const upperCaseOtp = inputOtp.toUpperCase();\r\n        setOtp(upperCaseOtp);\r\n    };\r\n    const handleDOBChange = (event) => {\r\n        setDOB(event.target.value);\r\n    };\r\n\r\n    const handleSendOtp = () => {\r\n        if (!mobileNumber) {\r\n            toast.error(t('please_enter_a_mobile_number'));\r\n        } else if (!isValidPhoneNumber(mobileNumber, countryCode)) {\r\n            toast.error(t('please_enter_a_valid_mobile_number'));\r\n        } else {\r\n            try {\r\n                const phoneNumber = parsePhoneNumber(mobileNumber, countryCode);\r\n                const body = {\r\n                    recipient: phoneNumber.number,\r\n                    otp_type: 'M',\r\n                    cc_code: phoneNumber.country,\r\n                    debug: false,\r\n                    is_resend: false\r\n                };\r\n                const headers = {\r\n                    headers: {\r\n                        Authorization: 'Token ' + token\r\n                    }\r\n                };\r\n                axios\r\n                    .post(BASE_URL + '/v2/request_otp/', body, headers)\r\n                    .then(function (response) {\r\n                        toast.success(t('oTP_sent_successfully'));\r\n                        setTimeout(() => {\r\n                            setOtpSent(true);\r\n                        });\r\n                    })\r\n                    .catch(function (error) {\r\n                        toast.error(t('error_while_sending_OTP'));\r\n                    });\r\n            } catch (err) {\r\n                toast.error(t('error_while_sending_OTP'));\r\n            }\r\n        }\r\n    };\r\n    const handleResendOTP = () => {\r\n        try {\r\n            const phoneNumber = parsePhoneNumber(mobileNumber, countryCode);\r\n            console.log(phoneNumber, phoneNumber.country);\r\n\r\n            const body = {\r\n                recipient: phoneNumber.number,\r\n                otp_type: 'M',\r\n                cc_code: phoneNumber.country,\r\n                debug: false,\r\n                is_resend: true\r\n            };\r\n            const headers = {\r\n                headers: {\r\n                    Authorization: 'Token ' + token\r\n                }\r\n            };\r\n\r\n            axios\r\n                .post(BASE_URL + '/v2/request_otp/', body, headers)\r\n                .then(function (response) {\r\n                    toast.success(t('oTP_Resend'));\r\n                    console.log(response.data, 'Data');\r\n                    console.log(response.data.status, 'Success');\r\n                })\r\n                .catch(function (error) {\r\n                    toast.error(t('error_while_sending_OTP'));\r\n                    console.log(error);\r\n                });\r\n        } catch (err) {\r\n            toast.error(t('error_while_sending_OTP'));\r\n            console.log(err);\r\n        }\r\n    };\r\n\r\n    const handleVerifyOtp = () => {\r\n        if (!otp) {\r\n            toast.error(t('please_enter_OTP'));\r\n        } else {\r\n            const phoneNumber = parsePhoneNumber(mobileNumber, countryCode);\r\n            const body = {\r\n                otp: otp,\r\n                recipient: phoneNumber.number,\r\n                otp_type: 'M'\r\n            };\r\n\r\n            const headers = {\r\n                headers: {\r\n                    Authorization: 'Token ' + token\r\n                }\r\n            };\r\n\r\n            try {\r\n                axios.post(BASE_URL + '/v2/otp_verify/', body, headers).then((response) => {\r\n                    console.log(response);\r\n                    if (response.status === 400) {\r\n                        toast.error(response.message);\r\n                    } else if (response.status === 500) {\r\n                        toast.error(\"Internal server error\")\r\n                    }\r\n                    if (response.status) {\r\n                        setMobileNumber(response.data.data.recipient);\r\n                        toast.success('OTP Verified successfully');\r\n                        console.log(response.data.data.user_found);\r\n                        const encryptedmob = encryptData(phoneNumber.number);\r\n                        if (response.data.data.user_found === false) {\r\n                            return navigate(`/lead/createlead/${encodeURIComponent(encryptedmob)}`, {\r\n                                state: { ph_number: phoneNumber.number }\r\n                            });\r\n                        } else {\r\n                            setShowDobPopup(true);\r\n                        }\r\n                    } else {\r\n                        toast.error(t('invalid_OTP'));\r\n                    }\r\n                });\r\n            } catch (err) {\r\n                toast.error(t('error_while_sending_OTP'));\r\n                console.log(err);\r\n            }\r\n\r\n        }\r\n    };\r\n\r\n    const handleDOBSubmit = () => {\r\n        if (!DOB) {\r\n            toast.error(t('please_enter_DOB'));\r\n        } else {\r\n            const headers = {\r\n                headers: {\r\n                    Authorization: 'Token ' + token\r\n                }\r\n            };\r\n            const body = {\r\n                dob: DOB,\r\n                recipient: mobileNumber\r\n            };\r\n            try {\r\n                axios.post(BASE_URL + '/v2/dob_verify/', body, headers).then((response) => {\r\n                    if (response.data.status) {\r\n                        setShowDobPopup(false);\r\n                        toast.success(response.data.message);\r\n                        setUserData(response.data.data);\r\n                        setVerifyPopUp(true);\r\n                    }\r\n                });\r\n            } catch (err) {\r\n                console.log(err);\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {verifyPopUp && <VerifyUser verifyPopUp={verifyPopUp} setVerifyPopUp={setVerifyPopUp} userData={userData} />}\r\n\r\n            <Grid open={verifyForm}>\r\n                {verifyForm ? (\r\n                    <MainCard title={t('Enter_Your_Mobile_Number_to_Continue')}>\r\n                        <Grid container spacing={gridSpacing}>\r\n                            {/* OTP Form */}\r\n                            <Grid item xs={12} sm={6}>\r\n                                <SubCard>\r\n                                    <form>\r\n                                        <Grid container direction=\"column\" spacing={2}>\r\n                                            <Grid item>\r\n                                                <MuiPhoneNumber\r\n                                                    defaultCountry={'in'}\r\n                                                    label={t('mobile_Number')}\r\n                                                    value={mobileNumber}\r\n                                                    onChange={handleMobileNumberChange}\r\n                                                    fullWidth\r\n                                                    required\r\n                                                    countryCodeEditable\r\n                                                    onCountryChange={(countryData) => setCountryCode(countryData.dialCode)}\r\n                                                />\r\n                                            </Grid>\r\n                                            {/* Popup Dialog */}\r\n                                            <Dialog open={showDobPopup}>\r\n                                                <DialogTitle sx={{ fontSize: '1.2rem' }}>\r\n                                                    {t('please_Enter_your_Date_of_Birth')}\r\n                                                </DialogTitle>\r\n                                                <DialogContent>\r\n                                                    <TextField\r\n                                                        value={DOB}\r\n                                                        type=\"date\"\r\n                                                        fullWidth\r\n                                                        onChange={handleDOBChange}\r\n                                                    // Add any necessary props and event handlers for capturing the date of birth\r\n                                                    />\r\n                                                </DialogContent>\r\n                                                <DialogActions>\r\n                                                    <Button onClick={handleDOBSubmit} color=\"primary\">\r\n                                                        {t('submit')}\r\n                                                    </Button>\r\n                                                    <Button onClick={() => setShowDobPopup(false)} color=\"primary\">\r\n                                                        {t('close')}\r\n                                                    </Button>\r\n                                                </DialogActions>\r\n                                            </Dialog>\r\n\r\n                                            {!otpSent ? (\r\n                                                <Grid item mt={2}>\r\n                                                    <Button\r\n                                                        type=\"button\"\r\n                                                        onClick={handleSendOtp}\r\n                                                        size=\"large\"\r\n                                                        variant=\"contained\"\r\n                                                        color=\"secondary\"\r\n                                                    >\r\n                                                        {t('Send_OTP')}\r\n                                                    </Button>\r\n                                                </Grid>\r\n                                            ) : (\r\n                                                <React.Fragment key=\"otpForm\">\r\n                                                    <Grid item>\r\n                                                        <TextField\r\n                                                            label=\"OTP\"\r\n                                                            value={otp}\r\n                                                            onChange={handleOtpChange}\r\n                                                            fullWidth\r\n                                                            required\r\n                                                            variant=\"standard\"\r\n                                                            inputProps={{ maxLength: 6 }}\r\n                                                        />\r\n                                                    </Grid>\r\n                                                    <Grid item>\r\n                                                        <Button\r\n                                                            size=\"large\"\r\n                                                            variant=\"contained\"\r\n                                                            color=\"secondary\"\r\n                                                            onClick={handleVerifyOtp}\r\n                                                        >\r\n                                                            {t('Verify_OTP')}\r\n                                                        </Button>\r\n                                                        <Button size=\"large\" onClick={handleResendOTP}>\r\n                                                            {t('Resend_OTP')}\r\n                                                        </Button>\r\n                                                    </Grid>\r\n                                                </React.Fragment>\r\n                                            )}\r\n                                        </Grid>\r\n                                    </form>\r\n                                </SubCard>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </MainCard>\r\n                ) : (\r\n                    ''\r\n                )}\r\n            </Grid>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default RegisterLeadViaPhone;\r\n","import CryptoJS from 'crypto-js';\r\n\r\nconst  ENCRYPTION_KEY = process.env.REACT_APP_ENCRYPTION_KEY\r\nconst encryptData = (data) => {\r\n    try {\r\n      const ciphertext = CryptoJS.AES.encrypt(data, ENCRYPTION_KEY).toString();\r\n      return ciphertext;\r\n    } catch (error) {\r\n      console.error('Encryption error:', error);\r\n      return null;\r\n    }\r\n  };\r\n\r\nexport { encryptData };"],"names":["_ref","verifyPopUp","setVerifyPopUp","userData","navigate","useNavigate","_jsx","_Fragment","children","_jsxs","Dialog","open","DialogTitle","sx","fontSize","textAlign","first_name","last_name","DialogActions","justifyContent","Button","onClick","concat","encodeURIComponent","ph_number","state","variant","color","mr","toast","error","BASE_URL","process","user","useAuthContext","token","_useState","useState","_useState2","_slicedToArray","mobileNumber","setMobileNumber","_useState3","_useState4","otp","setOtp","_useState5","_useState6","otpSent","setOtpSent","_useState7","_useState8","countryCode","setCountryCode","_useState9","_useState10","DOB","setDOB","_useState11","_useState12","verifyForm","_useState13","_useState14","showDobPopup","setShowDobPopup","_useState15","_useState16","_useState17","_useState18","setUserData","t","useTranslation","VerifyUser","Grid","MainCard","title","container","spacing","gridSpacing","item","xs","sm","SubCard","direction","MuiPhoneNumber","defaultCountry","label","value","onChange","phoneNumber","fullWidth","required","countryCodeEditable","onCountryChange","countryData","dialCode","DialogContent","TextField","type","event","target","headers","Authorization","body","dob","recipient","axios","then","response","data","status","success","message","err","console","log","React","upperCaseOtp","toUpperCase","inputProps","maxLength","size","parsePhoneNumber","number","otp_type","user_found","encryptedmob","CryptoJS","encrypt","toString","encryptData","country","cc_code","debug","is_resend","catch","mt","isValidPhoneNumber","setTimeout"],"sourceRoot":""}